{
  "address": "0xB9eC4CC15cb6413b9f367376F1179FB7CF051177",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdcAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "acceptLC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "acceptedLC",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[10]",
          "name": "signals",
          "type": "uint256[10]"
        }
      ],
      "name": "completeLC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dateAndPlaceOfExpiry",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_applicantAddressIRL",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addressEOA",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "addressIRL",
              "type": "string"
            }
          ],
          "internalType": "struct LCContract.ActorDetails",
          "name": "_beneficiary",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_currencyAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "portOfLoading",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "portOfDischarge",
              "type": "string"
            }
          ],
          "internalType": "struct LCContract.PortDetails",
          "name": "_portDetails",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "_descriptionOfGoodsAndOrServices",
          "type": "string"
        }
      ],
      "name": "createLC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creatorToLC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sequenceOfTotal",
          "type": "uint256"
        },
        {
          "internalType": "enum LCContract.FormOfDocCredit",
          "name": "formOfDocCredit",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "docCreditNumber",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dateOfIssue",
              "type": "uint256"
            },
            {
              "internalType": "enum LCContract.ApplicableRules",
              "name": "applicableRules",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "dateAndPlaceOfExpiry",
              "type": "uint256"
            }
          ],
          "internalType": "struct LCContract.IssueDetails",
          "name": "issueDetails",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addressEOA",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "addressIRL",
              "type": "string"
            }
          ],
          "internalType": "struct LCContract.ActorDetails",
          "name": "applicant",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "addressEOA",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "addressIRL",
              "type": "string"
            }
          ],
          "internalType": "struct LCContract.ActorDetails",
          "name": "beneficiary",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "currencyCode",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "currencyAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LCContract.CurrencyDetails",
          "name": "currencyDetails",
          "type": "tuple"
        },
        {
          "internalType": "enum LCContract.AvailableWithBy",
          "name": "availableWithBy",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "enum LCContract.PartialShipments",
              "name": "partialShipments",
              "type": "uint8"
            },
            {
              "internalType": "enum LCContract.Transshipment",
              "name": "transshipment",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "portOfLoading",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "portOfDischarge",
                  "type": "string"
                }
              ],
              "internalType": "struct LCContract.PortDetails",
              "name": "portDetails",
              "type": "tuple"
            }
          ],
          "internalType": "struct LCContract.ShippingDetails",
          "name": "shippingDetails",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "descriptionOfGoodsAndOrServices",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "documentsRequired",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "additionalConditions",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "periodForPresentation",
          "type": "uint256"
        },
        {
          "internalType": "enum LCContract.ConfirmationInstructions",
          "name": "confirmationInstructions",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "docCreditNumberCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getLC",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sequenceOfTotal",
              "type": "uint256"
            },
            {
              "internalType": "enum LCContract.FormOfDocCredit",
              "name": "formOfDocCredit",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "docCreditNumber",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "dateOfIssue",
                  "type": "uint256"
                },
                {
                  "internalType": "enum LCContract.ApplicableRules",
                  "name": "applicableRules",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "dateAndPlaceOfExpiry",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LCContract.IssueDetails",
              "name": "issueDetails",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addressEOA",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "addressIRL",
                  "type": "string"
                }
              ],
              "internalType": "struct LCContract.ActorDetails",
              "name": "applicant",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addressEOA",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "addressIRL",
                  "type": "string"
                }
              ],
              "internalType": "struct LCContract.ActorDetails",
              "name": "beneficiary",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "currencyCode",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "currencyAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LCContract.CurrencyDetails",
              "name": "currencyDetails",
              "type": "tuple"
            },
            {
              "internalType": "enum LCContract.AvailableWithBy",
              "name": "availableWithBy",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "enum LCContract.PartialShipments",
                  "name": "partialShipments",
                  "type": "uint8"
                },
                {
                  "internalType": "enum LCContract.Transshipment",
                  "name": "transshipment",
                  "type": "uint8"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "portOfLoading",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "portOfDischarge",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct LCContract.PortDetails",
                  "name": "portDetails",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LCContract.ShippingDetails",
              "name": "shippingDetails",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "descriptionOfGoodsAndOrServices",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "documentsRequired",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "additionalConditions",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "periodForPresentation",
              "type": "uint256"
            },
            {
              "internalType": "enum LCContract.ConfirmationInstructions",
              "name": "confirmationInstructions",
              "type": "uint8"
            }
          ],
          "internalType": "struct LCContract.LC",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "isLCAccepted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "uintToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[9]",
          "name": "_pubSignals",
          "type": "uint256[9]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ea286c6be09b19e21f6b3e2479facbe4dbd35bd3eb91e3430e7727e142b4575",
  "receipt": {
    "to": null,
    "from": "0xC4F01Cb7A8548Ad27e9ACd16857754e24110E942",
    "contractAddress": "0xB9eC4CC15cb6413b9f367376F1179FB7CF051177",
    "transactionIndex": 0,
    "gasUsed": "3069335",
    "logsBloom": "0x
    "blockHash": "0x943f8a0683c6a0ae1c0ac36a53fae365278a189d1e2faf78e23a0bff805b8cea",
    "transactionHash": "0x3ea286c6be09b19e21f6b3e2479facbe4dbd35bd3eb91e3430e7727e142b4575",
    "logs": [],
    "blockNumber": 24465813,
    "cumulativeGasUsed": "3069335",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x321dD63e14add3Edab7141534847e303E3f0fed8"
  ],
  "numDeployments": 1,
  "solcInputHash": "c0c4de56f2df3f75864bf04d5b0f5b88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"acceptLC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedLC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[10]\",\"name\":\"signals\",\"type\":\"uint256[10]\"}],\"name\":\"completeLC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dateAndPlaceOfExpiry\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_applicantAddressIRL\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addressEOA\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressIRL\",\"type\":\"string\"}],\"internalType\":\"struct LCContract.ActorDetails\",\"name\":\"_beneficiary\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_currencyAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"portOfLoading\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"portOfDischarge\",\"type\":\"string\"}],\"internalType\":\"struct LCContract.PortDetails\",\"name\":\"_portDetails\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"_descriptionOfGoodsAndOrServices\",\"type\":\"string\"}],\"name\":\"createLC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creatorToLC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sequenceOfTotal\",\"type\":\"uint256\"},{\"internalType\":\"enum LCContract.FormOfDocCredit\",\"name\":\"formOfDocCredit\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"docCreditNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dateOfIssue\",\"type\":\"uint256\"},{\"internalType\":\"enum LCContract.ApplicableRules\",\"name\":\"applicableRules\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dateAndPlaceOfExpiry\",\"type\":\"uint256\"}],\"internalType\":\"struct LCContract.IssueDetails\",\"name\":\"issueDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addressEOA\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressIRL\",\"type\":\"string\"}],\"internalType\":\"struct LCContract.ActorDetails\",\"name\":\"applicant\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addressEOA\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressIRL\",\"type\":\"string\"}],\"internalType\":\"struct LCContract.ActorDetails\",\"name\":\"beneficiary\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"currencyCode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct LCContract.CurrencyDetails\",\"name\":\"currencyDetails\",\"type\":\"tuple\"},{\"internalType\":\"enum LCContract.AvailableWithBy\",\"name\":\"availableWithBy\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"enum LCContract.PartialShipments\",\"name\":\"partialShipments\",\"type\":\"uint8\"},{\"internalType\":\"enum LCContract.Transshipment\",\"name\":\"transshipment\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"portOfLoading\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"portOfDischarge\",\"type\":\"string\"}],\"internalType\":\"struct LCContract.PortDetails\",\"name\":\"portDetails\",\"type\":\"tuple\"}],\"internalType\":\"struct LCContract.ShippingDetails\",\"name\":\"shippingDetails\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"descriptionOfGoodsAndOrServices\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentsRequired\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"additionalConditions\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"periodForPresentation\",\"type\":\"uint256\"},{\"internalType\":\"enum LCContract.ConfirmationInstructions\",\"name\":\"confirmationInstructions\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"docCreditNumberCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getLC\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sequenceOfTotal\",\"type\":\"uint256\"},{\"internalType\":\"enum LCContract.FormOfDocCredit\",\"name\":\"formOfDocCredit\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"docCreditNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dateOfIssue\",\"type\":\"uint256\"},{\"internalType\":\"enum LCContract.ApplicableRules\",\"name\":\"applicableRules\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dateAndPlaceOfExpiry\",\"type\":\"uint256\"}],\"internalType\":\"struct LCContract.IssueDetails\",\"name\":\"issueDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addressEOA\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressIRL\",\"type\":\"string\"}],\"internalType\":\"struct LCContract.ActorDetails\",\"name\":\"applicant\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addressEOA\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"addressIRL\",\"type\":\"string\"}],\"internalType\":\"struct LCContract.ActorDetails\",\"name\":\"beneficiary\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"currencyCode\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct LCContract.CurrencyDetails\",\"name\":\"currencyDetails\",\"type\":\"tuple\"},{\"internalType\":\"enum LCContract.AvailableWithBy\",\"name\":\"availableWithBy\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"enum LCContract.PartialShipments\",\"name\":\"partialShipments\",\"type\":\"uint8\"},{\"internalType\":\"enum LCContract.Transshipment\",\"name\":\"transshipment\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"portOfLoading\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"portOfDischarge\",\"type\":\"string\"}],\"internalType\":\"struct LCContract.PortDetails\",\"name\":\"portDetails\",\"type\":\"tuple\"}],\"internalType\":\"struct LCContract.ShippingDetails\",\"name\":\"shippingDetails\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"descriptionOfGoodsAndOrServices\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentsRequired\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"additionalConditions\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"periodForPresentation\",\"type\":\"uint256\"},{\"internalType\":\"enum LCContract.ConfirmationInstructions\",\"name\":\"confirmationInstructions\",\"type\":\"uint8\"}],\"internalType\":\"struct LCContract.LC\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"isLCAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"uintToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[9]\",\"name\":\"_pubSignals\",\"type\":\"uint256[9]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LC.sol\":\"LCContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/LC.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { Bytes32ArrayUtils } from \\\"./lib/Bytes32ArrayUtils.sol\\\";\\nimport { Uint256ArrayUtils } from \\\"./lib/Uint256ArrayUtils.sol\\\";\\n\\nimport { Groth16Verifier } from \\\"./verifiers/verifier.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\npragma solidity ^0.8.18;\\n\\ncontract LCContract is Groth16Verifier {\\n    enum FormOfDocCredit { Irrevocable, Irrevocable_Transferable }\\n    enum ApplicableRules { EUCP_LATEST_VERSION, EUCPURR_LATEST_VERSION, OTHR, UCP_LATEST_VERSION,  UCPURR_LATEST_VERSION }\\n    enum PartialShipments { NotAllowed, Allowed, Conditional }\\n    enum Transshipment { NotAllowed, Allowed }\\n    enum ConfirmationInstructions { Confirm, MayAdd, Without }\\n    enum AvailableWithBy {\\n        BY_ACCEPTANCE,\\n        BY_DEF_PAYMENT,\\n        BY_MIXED_PYMT,\\n        BY_NEGOTIATION,\\n        BY_PAYMENT,\\n        BY_SMART_CONTRACT\\n    }\\n\\n    // TODO: \\n    // 1. Update docCreditNumber to be a hash of the LC.\\n    // 2. Update dateAndPlaceOfExpiry to be a struct with date, chainId, and contract address. Currently blocktimestamp..\\n    // struct DateAndPlaceOfExpiry {\\n    //     string date; // YYMMDD format\\n    //     uint256 chainId;\\n    //     address contractAddress;\\n    // }\\n    // 3. Update dateOfIssue to the YYMMDD format.\\n\\n    // ------------- LC structs -----------------\\n\\n    struct ActorDetails {\\n        address addressEOA;\\n        string addressIRL;\\n    }\\n\\n    struct IssueDetails {\\n        uint256 dateOfIssue;\\n        ApplicableRules applicableRules;\\n        uint256 dateAndPlaceOfExpiry;\\n    }\\n\\n    struct PortDetails {\\n        string portOfLoading;\\n        string portOfDischarge;\\n    }\\n\\n    struct ShippingDetails {\\n        PartialShipments partialShipments;\\n        Transshipment transshipment;\\n        PortDetails portDetails;\\n        // string placeOfFinalDestination;\\n        // string latestDateOfShipment;\\n        // string shipmentPeriod;\\n    }\\n\\n    struct CurrencyDetails {\\n        string currencyCode;        // ISO 4217\\n        address currencyAddress;    // Address of the currency contract.\\n        uint256 amount;\\n    }\\n\\n    struct LC {\\n        uint256 sequenceOfTotal;\\n        FormOfDocCredit formOfDocCredit;\\n        uint256 docCreditNumber;\\n        // string referenceToPreAdvice;\\n        IssueDetails issueDetails;\\n        // string applicantBank\\n        ActorDetails applicant;\\n        ActorDetails beneficiary;\\n        CurrencyDetails currencyDetails;\\n        // string percentageCreditAmountTolerance\\n        // string additionalAmountsCovered\\n        AvailableWithBy availableWithBy;\\n        // string draftsAt;\\n        // string drawee;\\n        // string mixedPaymentDetails;\\n        // string deferredPaymentDetails;\\n        ShippingDetails shippingDetails;\\n        string descriptionOfGoodsAndOrServices;\\n        string documentsRequired;\\n        string additionalConditions;\\n        // string charges;\\n        uint256 periodForPresentation;\\n        ConfirmationInstructions confirmationInstructions;\\n        // string reimbursingBank;\\n        // string InstructionsToThePayingOrAcceptingOrNegotiatingBank;\\n        // string adviseThroughBank;\\n        // string senderToReceiverInformation;\\n    }\\n\\n    mapping(address => LC) public creatorToLC;              // We only allow one LC per creator.\\n    mapping(address => bool) public acceptedLC;\\n    uint256 public docCreditNumberCounter = 1;      // starts from 1\\n    IERC20 public usdc;     // Only support USDC for now.\\n\\n    constructor(address _usdcAddress) {\\n        usdc = IERC20(_usdcAddress);\\n    }\\n\\n\\n    function createLC(\\n        uint256 _dateAndPlaceOfExpiry,      // Just pass in the block.timestamp for now.\\n        string memory _applicantAddressIRL,\\n        ActorDetails memory _beneficiary,\\n        uint256 _currencyAmount,\\n        PortDetails memory _portDetails,\\n        string memory _descriptionOfGoodsAndOrServices\\n    ) external {\\n        LC memory newLC;\\n\\n        // Standard details\\n        newLC.sequenceOfTotal = 1;\\n        newLC.formOfDocCredit = FormOfDocCredit.Irrevocable;\\n        newLC.docCreditNumber = docCreditNumberCounter;\\n        newLC.issueDetails.dateOfIssue = block.timestamp;\\n        newLC.issueDetails.applicableRules = ApplicableRules.EUCP_LATEST_VERSION;      //Only support EUCP latest version for now. \\n        newLC.issueDetails.dateAndPlaceOfExpiry = _dateAndPlaceOfExpiry;     // Set to block.timestamp for now.\\n        \\n        newLC.applicant = ActorDetails({\\n            addressIRL: _applicantAddressIRL,\\n            addressEOA: msg.sender\\n        });\\n\\n        newLC.beneficiary = ActorDetails({\\n            addressIRL: _beneficiary.addressIRL,\\n            addressEOA: _beneficiary.addressEOA\\n        });\\n        \\n        newLC.currencyDetails = CurrencyDetails({\\n            currencyCode: \\\"USD\\\",\\n            currencyAddress: address(usdc),\\n            amount: _currencyAmount\\n        });\\n\\n        newLC.availableWithBy = AvailableWithBy.BY_SMART_CONTRACT;\\n\\n        // Shipping Details\\n        newLC.shippingDetails.partialShipments = PartialShipments.NotAllowed;   // Only support NotAllowed for now.\\n        newLC.shippingDetails.transshipment = Transshipment.NotAllowed;     // Only support NotAllowed for now.\\n        newLC.shippingDetails.portDetails = PortDetails({\\n            portOfLoading: _portDetails.portOfLoading,\\n            portOfDischarge: _portDetails.portOfDischarge\\n        });\\n\\n        // Other details\\n        newLC.descriptionOfGoodsAndOrServices = _descriptionOfGoodsAndOrServices;\\n        newLC.documentsRequired = \\\"Proof of SeaWayBill\\\";\\n        newLC.additionalConditions = \\\"Tokenized USD will be transferred digitally to this contract address on the Ethereum blockchain.\\\";\\n        newLC.periodForPresentation = 21 days;\\n        newLC.confirmationInstructions = ConfirmationInstructions.Without;   \\n\\n        // Add LC to mappings.\\n        creatorToLC[msg.sender] = newLC;\\n        docCreditNumberCounter++;\\n\\n        // Transfer in the USDC to this contract.\\n        usdc.transferFrom(msg.sender, address(this), _currencyAmount);\\n    }\\n\\n\\n    function acceptLC(\\n        address _creator\\n    ) external {\\n        LC memory lc = creatorToLC[_creator];\\n        require(lc.docCreditNumber != 0, \\\"LC does not exist\\\");\\n        require(lc.beneficiary.addressEOA == msg.sender, \\\"Only beneficiary can accept LC\\\");\\n        require(lc.issueDetails.dateAndPlaceOfExpiry > block.timestamp, \\\"LC has expired\\\");\\n        acceptedLC[_creator] = true;\\n    }\\n\\n    function getLC(address _creator) external view returns (LC memory) {\\n        return creatorToLC[_creator];\\n    }\\n\\n\\n    function isLCAccepted(address _creator) external view returns (bool) {\\n        return acceptedLC[_creator];\\n    }\\n\\n    function completeLC(\\n        uint256[2] calldata a,\\n        uint256[2][2] calldata b,\\n        uint256[2] calldata c,\\n        uint256[10] calldata signals\\n    ) public {\\n\\n        // require(this.verifyProof(a, b, c, signals), \\\"Invalid Proof\\\");\\n\\n        // validate the sigining domain is GCM\\n        address buyerAddress = uintToAddress(signals[0]);\\n        // 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\\n        LC memory lc = creatorToLC[buyerAddress];\\n\\n        // validate the caller is the seller\\n        require(lc.beneficiary.addressEOA == msg.sender, \\\"Only beneficiary can complete LC\\\");\\n\\n        // validate the LC has not expired\\n        require(lc.issueDetails.dateAndPlaceOfExpiry > block.timestamp, \\\"LC has expired\\\");\\n\\n        // validate the LC has been accepted\\n        require(acceptedLC[buyerAddress] == true, \\\"LC has not been accepted\\\");\\n\\n        // validate the applicant IRL address matches the one on the seaway bill\\n        // validate the beneficiary IRL address matches the one on the seaway bill\\n        // validate the port of loading matches the one on the seaway bill\\n        // validate the port of discharge matches the one on the seaway bill\\n        // validate the description of goods matches the one on the seaway bill\\n\\n        // Transfer the USDC to the beneficiary.\\n        usdc.transfer(lc.beneficiary.addressEOA, lc.currencyDetails.amount);\\n    }\\n\\n    function uintToAddress(uint256 value) public pure returns (address) {\\n        address addr;\\n        assembly {\\n            addr := shr(96, shl(96, value))\\n        }\\n        return addr;\\n    }\\n}\\n   \",\"keccak256\":\"0xa5c15c3bd37651e2ea4a36c92c11f6846d2917af6270c571b6a5b822520223af\",\"license\":\"MIT\"},\"contracts/lib/Bytes32ArrayUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title Bytes32ArrayUtils\\n * @author ZKP2P\\n *\\n * Fork of Set Protocol's AddressArrayUtils library adapted for usage with bytes32 arrays.\\n */\\nlibrary Bytes32ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(bytes32[] memory A, bytes32 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(bytes32[] memory A, bytes32 a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(bytes32[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            bytes32 current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(bytes32[] memory A, bytes32 a)\\n        internal\\n        pure\\n        returns (bytes32[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            (bytes32[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(bytes32[] storage A, bytes32 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"bytes32 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(bytes32[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (bytes32[] memory, bytes32)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        bytes32[] memory newBytes = new bytes32[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newBytes[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newBytes[j - 1] = A[j];\\n        }\\n        return (newBytes, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x14d572deda126ff812eb5ab0eed33120e13cc568fd611a4a6bff652f3e8440a8\",\"license\":\"MIT\"},\"contracts/lib/Uint256ArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache-2.0\\n*/\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title Uint256ArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Uint256 Arrays\\n */\\nlibrary Uint256ArrayUtils {\\n\\n    uint256 constant internal MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(uint256[] memory A, uint256 a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (MAX_INT, false);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(uint256[] memory A, uint256[] memory B) internal pure returns (uint256[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        uint256[] memory newUints = new uint256[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newUints[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newUints[aLength + j] = B[j];\\n        }\\n        return newUints;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The bytes32 to remove\\n     */\\n    function removeStorage(uint256[] storage A, uint256 a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"uint256 not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x102021415f8444ff563fc6d0082f39296f47c09ce73fb4cd642e700ac489eefe\",\"license\":\"Apache-2.0\"},\"contracts/verifiers/verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n//\\n// TODO: Replace this with your verifier.\\n//\\n\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay  = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1  = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2  = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1  = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2  = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant deltax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant deltay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant deltay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\n    \\n    uint256 constant IC0x = 1998521002598360388602661849137828971082850022179201276259957576869158385496;\\n    uint256 constant IC0y = 10182634046043222599993239701715375786290314885136482885786308640672320063319;\\n    \\n    uint256 constant IC1x = 17534604985489915275336573121119366129424505037158539751180910676090781339173;\\n    uint256 constant IC1y = 11889803877151783685507076831622499352707945684590463546176362002343744945830;\\n    \\n    uint256 constant IC2x = 9992336274403644311989910445413010872439938683072324873139062537581346554658;\\n    uint256 constant IC2y = 17094363607428777440816989951269265250921868684073483076453812477644688878594;\\n    \\n    uint256 constant IC3x = 10270071836597960189366517867315391458230172881550979668669794056985954263107;\\n    uint256 constant IC3y = 882841555683691900016726901755870260971983361621028119775541009388834222791;\\n    \\n    uint256 constant IC4x = 11471609645746435874975532346432696334497909214217742363023787985217925334917;\\n    uint256 constant IC4y = 1635599707674569034333064936217670195841550852796067614373892269396810315430;\\n    \\n    uint256 constant IC5x = 453880842082142026510201738485953652902535436557854428092884808069943783522;\\n    uint256 constant IC5y = 13309879914231159275700902574924268857776766743986319950361610474455348909711;\\n    \\n    uint256 constant IC6x = 7733670325634241662139843022276639438709392013627892452418403505675410985349;\\n    uint256 constant IC6y = 3366840747495307624435768593282486082491478573721269681014867559578192484122;\\n    \\n    uint256 constant IC7x = 1326045473593465419666979597452282057157439663740914872249936072649484571382;\\n    uint256 constant IC7y = 18463487243925669876804192815336506936268656265022969607605759184392699401434;\\n    \\n    uint256 constant IC8x = 12923538748190222120446215895986091677252590732594483518761895669182373086398;\\n    uint256 constant IC8y = 21740637604174493220884716839308238986759517939830112847392760106777577362333;\\n    \\n    uint256 constant IC9x = 5143826820555728840672719202395505210358925097032580108302952338855713225528;\\n    uint256 constant IC9y = 14156260496275258914843777346654479003779949393688540183087995288131227296874;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[9] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n                \\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n                \\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n                \\n                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n                \\n                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\\n                \\n                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\\n                \\n                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\\n                \\n                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n            checkField(calldataload(add(_pubSignals, 64)))\\n            \\n            checkField(calldataload(add(_pubSignals, 96)))\\n            \\n            checkField(calldataload(add(_pubSignals, 128)))\\n            \\n            checkField(calldataload(add(_pubSignals, 160)))\\n            \\n            checkField(calldataload(add(_pubSignals, 192)))\\n            \\n            checkField(calldataload(add(_pubSignals, 224)))\\n            \\n            checkField(calldataload(add(_pubSignals, 256)))\\n            \\n            checkField(calldataload(add(_pubSignals, 288)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0x07d1c2c780abb5e9541b8ca05f89952e307688bdddb04dfec19af627b94b33eb\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xfb9a1c05ce82a728e108b58b71a09f13d9586fc70555e82d190e9b2f5a6183af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016002553480156200001657600080fd5b50604051620036553803806200365583398101604081905262000039916200005f565b600380546001600160a01b0319166001600160a01b039290921691909117905562000091565b6000602082840312156200007257600080fd5b81516001600160a01b03811681146200008a57600080fd5b9392505050565b6135b480620000a16000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80635773cdfb116100715780635773cdfb1461016d5780635ab91137146101845780637aa711f8146101a4578063a21ac172146101b7578063c542c93b146101e3578063cd1aa73e146101f657600080fd5b806305e514e2146100ae5780631e5f8b72146100e657806328cf5cba146100fb5780633e413bee1461012d5780634db7944814610140575b600080fd5b6100d16100bc366004612c81565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100f96100f4366004612e2b565b610209565b005b610115610109366004612eea565b6001600160a01b031690565b6040516001600160a01b0390911681526020016100dd565b600354610115906001600160a01b031681565b61015361014e366004612c81565b610667565b6040516100dd9e9d9c9b9a999897969594939291906130a8565b61017660025481565b6040519081526020016100dd565b610197610192366004612c81565b610c83565b6040516100dd9190613197565b6100f96101b2366004613314565b611366565b6100d16101c5366004612c81565b6001600160a01b031660009081526001602052604090205460ff1690565b6100d16101f1366004613374565b611be9565b6100f9610204366004612c81565b612335565b610211612b24565b600181526000602080830182905260025460408085019190915260608085018051429052805184018590525182018b9052815180830183523381528084018b9052608080870191909152825180840184528a516001600160a01b0390811682528b8601518287015260a080890192909252845191820185526003828501818152621554d160ea1b8486015283525416818601528084018a905260c0870152600560e08701526101008601805186905280518501959095528251808401845288518152888501518186015294518301949094526101208501869052815180830183526013815272141c9bdbd9881bd98814d95855d85e509a5b1b606a1b8185015261014086015281519384019091528083529061351f90830139610160820152621baf8061018082015260026101a0820152336000908152602081815260409091208251815590820151600180830180548594939260ff1990911690838181111561037d5761037d612f03565b0217905550604082015160028201556060820151805160038301908155602082015160048085018054909160ff199091169060019084908111156103c3576103c3612f03565b021790555060409190910151600290910155608082015180516006830180546001600160a01b0319166001600160a01b03909216919091178155602082015160078401906104119082613415565b50505060a082015180516008830180546001600160a01b0319166001600160a01b03909216919091178155602082015160098401906104509082613415565b50505060c08201518051600a830190819061046b9082613415565b506020820151600182810180546001600160a01b0319166001600160a01b039093169290921790915560409092015160029091015560e0830151600d830180549192909160ff1916908360058111156104c6576104c6612f03565b02179055506101008201518051600e83018054909190829060ff191660018360028111156104f6576104f6612f03565b021790555060208201518154829061ff00191661010083600181111561051e5761051e612f03565b0217905550604082015180516001830190819061053b9082613415565b50602082015160018201906105509082613415565b5050505061012083015160118301915061056a9082613415565b5061014082015160128201906105809082613415565b5061016082015160138201906105969082613415565b5061018082015160148201556101a082015160158201805460ff191660018360028111156105c6576105c6612f03565b02179055505060028054915060006105dd836134d5565b90915550506003546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d91906134fc565b5050505050505050565b600060208181529181526040908190208054600182015460028301548451606081019095526003840180548652600480860154949760ff94851697939695939492939085019216908111156106be576106be612f03565b60048111156106cf576106cf612f03565b815260029190910154602091820152604080518082019091526006840180546001600160a01b0316825260078501805494959492939192918401916107139061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461073f9061338c565b801561078c5780601f106107615761010080835404028352916020019161078c565b820191906000526020600020905b81548152906001019060200180831161076f57829003601f168201915b505050919092525050604080518082019091526008840180546001600160a01b0316825260098501805494959492935090916020840191906107cd9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546107f99061338c565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b5050505050815250509080600a0160405180606001604052908160008201805461086f9061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461089b9061338c565b80156108e85780601f106108bd576101008083540402835291602001916108e8565b820191906000526020600020905b8154815290600101906020018083116108cb57829003601f168201915b505050918352505060018201546001600160a01b03166020820152600291820154604091820152600d840154815160608101909252600e85018054949560ff9283169590949192849291169081111561094357610943612f03565b600281111561095457610954612f03565b81528154602090910190610100900460ff16600181111561097757610977612f03565b600181111561098857610988612f03565b8152602001600182016040518060400160405290816000820180546109ac9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546109d89061338c565b8015610a255780601f106109fa57610100808354040283529160200191610a25565b820191906000526020600020905b815481529060010190602001808311610a0857829003601f168201915b50505050508152602001600182018054610a3e9061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6a9061338c565b8015610ab75780601f10610a8c57610100808354040283529160200191610ab7565b820191906000526020600020905b815481529060010190602001808311610a9a57829003601f168201915b5050505050815250508152505090806011018054610ad49061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b009061338c565b8015610b4d5780601f10610b2257610100808354040283529160200191610b4d565b820191906000526020600020905b815481529060010190602001808311610b3057829003601f168201915b505050505090806012018054610b629061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8e9061338c565b8015610bdb5780601f10610bb057610100808354040283529160200191610bdb565b820191906000526020600020905b815481529060010190602001808311610bbe57829003601f168201915b505050505090806013018054610bf09061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1c9061338c565b8015610c695780601f10610c3e57610100808354040283529160200191610c69565b820191906000526020600020905b815481529060010190602001808311610c4c57829003601f168201915b50505050601483015460159093015491929160ff1690508e565b610c8b612b24565b6001600160a01b0382166000908152602081815260409182902082516101c0810190935280548352600180820154919284019160ff1690811115610cd157610cd1612f03565b6001811115610ce257610ce2612f03565b81526020016002820154815260200160038201604051806060016040529081600082015481526020016001820160009054906101000a900460ff166004811115610d2e57610d2e612f03565b6004811115610d3f57610d3f612f03565b815260029190910154602091820152908252604080518082019091526006840180546001600160a01b03168252600785018054948401949293919291840191610d879061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610db39061338c565b8015610e005780601f10610dd557610100808354040283529160200191610e00565b820191906000526020600020905b815481529060010190602001808311610de357829003601f168201915b505050919092525050508152604080518082019091526008830180546001600160a01b0316825260098401805460209485019484019190610e409061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6c9061338c565b8015610eb95780601f10610e8e57610100808354040283529160200191610eb9565b820191906000526020600020905b815481529060010190602001808311610e9c57829003601f168201915b5050505050815250508152602001600a8201604051806060016040529081600082018054610ee69061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f129061338c565b8015610f5f5780601f10610f3457610100808354040283529160200191610f5f565b820191906000526020600020905b815481529060010190602001808311610f4257829003601f168201915b505050918352505060018201546001600160a01b0316602080830191909152600290920154604090910152908252600d83015491019060ff166005811115610fa957610fa9612f03565b6005811115610fba57610fba612f03565b81526040805160608101909152600e83018054602090930192829060ff166002811115610fe957610fe9612f03565b6002811115610ffa57610ffa612f03565b81528154602090910190610100900460ff16600181111561101d5761101d612f03565b600181111561102e5761102e612f03565b8152602001600182016040518060400160405290816000820180546110529061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461107e9061338c565b80156110cb5780601f106110a0576101008083540402835291602001916110cb565b820191906000526020600020905b8154815290600101906020018083116110ae57829003601f168201915b505050505081526020016001820180546110e49061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546111109061338c565b801561115d5780601f106111325761010080835404028352916020019161115d565b820191906000526020600020905b81548152906001019060200180831161114057829003601f168201915b50505050508152505081525050815260200160118201805461117e9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546111aa9061338c565b80156111f75780601f106111cc576101008083540402835291602001916111f7565b820191906000526020600020905b8154815290600101906020018083116111da57829003601f168201915b505050505081526020016012820180546112109061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461123c9061338c565b80156112895780601f1061125e57610100808354040283529160200191611289565b820191906000526020600020905b81548152906001019060200180831161126c57829003601f168201915b505050505081526020016013820180546112a29061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546112ce9061338c565b801561131b5780601f106112f05761010080835404028352916020019161131b565b820191906000526020600020905b8154815290600101906020018083116112fe57829003601f168201915b505050918352505060148201546020820152601582015460409091019060ff16600281111561134c5761134c612f03565b600281111561135d5761135d612f03565b90525092915050565b80356001600160a01b031660008181526020818152604080832081516101c0810190925280548252600180820154929391929184019160ff16908111156113af576113af612f03565b60018111156113c0576113c0612f03565b81526020016002820154815260200160038201604051806060016040529081600082015481526020016001820160009054906101000a900460ff16600481111561140c5761140c612f03565b600481111561141d5761141d612f03565b815260029190910154602091820152908252604080518082019091526006840180546001600160a01b031682526007850180549484019492939192918401916114659061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546114919061338c565b80156114de5780601f106114b3576101008083540402835291602001916114de565b820191906000526020600020905b8154815290600101906020018083116114c157829003601f168201915b505050919092525050508152604080518082019091526008830180546001600160a01b031682526009840180546020948501948401919061151e9061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461154a9061338c565b80156115975780601f1061156c57610100808354040283529160200191611597565b820191906000526020600020905b81548152906001019060200180831161157a57829003601f168201915b5050505050815250508152602001600a82016040518060600160405290816000820180546115c49061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546115f09061338c565b801561163d5780601f106116125761010080835404028352916020019161163d565b820191906000526020600020905b81548152906001019060200180831161162057829003601f168201915b505050918352505060018201546001600160a01b0316602080830191909152600290920154604090910152908252600d83015491019060ff16600581111561168757611687612f03565b600581111561169857611698612f03565b81526040805160608101909152600e83018054602090930192829060ff1660028111156116c7576116c7612f03565b60028111156116d8576116d8612f03565b81528154602090910190610100900460ff1660018111156116fb576116fb612f03565b600181111561170c5761170c612f03565b8152602001600182016040518060400160405290816000820180546117309061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461175c9061338c565b80156117a95780601f1061177e576101008083540402835291602001916117a9565b820191906000526020600020905b81548152906001019060200180831161178c57829003601f168201915b505050505081526020016001820180546117c29061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546117ee9061338c565b801561183b5780601f106118105761010080835404028352916020019161183b565b820191906000526020600020905b81548152906001019060200180831161181e57829003601f168201915b50505050508152505081525050815260200160118201805461185c9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546118889061338c565b80156118d55780601f106118aa576101008083540402835291602001916118d5565b820191906000526020600020905b8154815290600101906020018083116118b857829003601f168201915b505050505081526020016012820180546118ee9061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461191a9061338c565b80156119675780601f1061193c57610100808354040283529160200191611967565b820191906000526020600020905b81548152906001019060200180831161194a57829003601f168201915b505050505081526020016013820180546119809061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546119ac9061338c565b80156119f95780601f106119ce576101008083540402835291602001916119f9565b820191906000526020600020905b8154815290600101906020018083116119dc57829003601f168201915b505050918352505060148201546020820152601582015460409091019060ff166002811115611a2a57611a2a612f03565b6002811115611a3b57611a3b612f03565b90525060a0810151519091506001600160a01b03163314611aa35760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792062656e65666963696172792063616e20636f6d706c657465204c4360448201526064015b60405180910390fd5b4281606001516040015111611aeb5760405162461bcd60e51b815260206004820152600e60248201526d1310c81a185cc8195e1c1a5c995960921b6044820152606401611a9a565b6001600160a01b03821660009081526001602081905260409091205460ff16151514611b595760405162461bcd60e51b815260206004820152601860248201527f4c4320686173206e6f74206265656e20616363657074656400000000000000006044820152606401611a9a565b60035460a08201515160c0830151604090810151905163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af1158015611bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be091906134fc565b50505050505050565b600061228d565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110611c21576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa915081611c57576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa91505080611c88576000805260206000f35b5050505050565b7f046b1f6ff37f1c517167dd65f3117b65a3d504301dee0fa7803d954c4afcf75885527f16832aa8567bcea698e1156145cc2162ab777c81c0af4cbcdb79f1a897080757602086015260006080860186611d2c87357f1a4963f8b74ad2b68e4d35c79f61a56f7f5a79a8cc84af1d1807a3e077c6bea67f26c43c169edb64936f35b0d03566a7de5c2f5784124457feb2a1955c95268e2584611c24565b611d7c60208801357f25cb112258fda6375ff57c509e3a48bee3aef73fa7570be21722d1d22e146c027f1617763fb0034c0379397367bea418561184e3dca6bd1f87889929d72832032284611c24565b611dcc60408801357f01f3abad48c437417be02a73d05ba69ffdf74faf1e3e335da858622d19b972c77f16b4a7983e3c561dadc1ed34e34db843237c205242565f0d1c6fd943e00ca04384611c24565b611e1c60608801357f039db774f52b360975aaabcd5946d16e03e2cec58c5a6c5e39a5845c5448b6a67f195cb3729018cb00d3b1c244d39a8c328d1279432970ce02351da7dcff8ec78584611c24565b611e6c60808801357f1d6d20046d8274a8ca0cf6bdd3e2bdac1ba08c53d0a0bd739d2c73648049968f7f0100e3301c7e55011a1d6d8a75a6e876a4360387b1c140289b486617a8d5f06284611c24565b611ebc60a08801357f077190781706b89508d280a15fed9d7b0119c1f86f749830b7b655f033be971a7f11191a2f646ea3aa1979997d85a8c7fb3efd89794aa99ca7202e6ca8f781d18584611c24565b611f0c60c08801357f28d1f6a47bab06cd55a0461d9e7a545a2ebec068187c75571abcaf7adb9254da7f02ee83e0447702d87ebebe409337b7777234076204d445a6da5e4f72cfc092f684611c24565b611f5c60e08801357f3010c3cb3673b001beadca3f88ac8a3ba6e8c525103a43421a6a5223895d939d7f1c9276b622645ca8626de8a34be1e5128a1dd6fb45d2fee53d46b5915ea0c4be84611c24565b611fad6101008801357f1f4c28d50901446a5c84182ed47659f13e10e13561c2ec8d93674f959a53246a7f0b5f4d84cf0b0c3394bc154ad8abf4f967973550929bc62ee8f3aed0280ebb3884611c24565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08201526020816103008360086107d05a03fa9051169695505050505050565b60405161038081016040526122a56000840135611bf0565b6122b26020840135611bf0565b6122bf6040840135611bf0565b6122cc6060840135611bf0565b6122d96080840135611bf0565b6122e660a0840135611bf0565b6122f360c0840135611bf0565b61230060e0840135611bf0565b61230e610100840135611bf0565b61231c610120840135611bf0565b612329818486888a611c8f565b90508060005260206000f35b6001600160a01b03811660009081526020818152604080832081516101c0810190925280548252600180820154929391929184019160ff169081111561237d5761237d612f03565b600181111561238e5761238e612f03565b81526020016002820154815260200160038201604051806060016040529081600082015481526020016001820160009054906101000a900460ff1660048111156123da576123da612f03565b60048111156123eb576123eb612f03565b815260029190910154602091820152908252604080518082019091526006840180546001600160a01b031682526007850180549484019492939192918401916124339061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461245f9061338c565b80156124ac5780601f10612481576101008083540402835291602001916124ac565b820191906000526020600020905b81548152906001019060200180831161248f57829003601f168201915b505050919092525050508152604080518082019091526008830180546001600160a01b03168252600984018054602094850194840191906124ec9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546125189061338c565b80156125655780601f1061253a57610100808354040283529160200191612565565b820191906000526020600020905b81548152906001019060200180831161254857829003601f168201915b5050505050815250508152602001600a82016040518060600160405290816000820180546125929061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546125be9061338c565b801561260b5780601f106125e05761010080835404028352916020019161260b565b820191906000526020600020905b8154815290600101906020018083116125ee57829003601f168201915b505050918352505060018201546001600160a01b0316602080830191909152600290920154604090910152908252600d83015491019060ff16600581111561265557612655612f03565b600581111561266657612666612f03565b81526040805160608101909152600e83018054602090930192829060ff16600281111561269557612695612f03565b60028111156126a6576126a6612f03565b81528154602090910190610100900460ff1660018111156126c9576126c9612f03565b60018111156126da576126da612f03565b8152602001600182016040518060400160405290816000820180546126fe9061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461272a9061338c565b80156127775780601f1061274c57610100808354040283529160200191612777565b820191906000526020600020905b81548152906001019060200180831161275a57829003601f168201915b505050505081526020016001820180546127909061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546127bc9061338c565b80156128095780601f106127de57610100808354040283529160200191612809565b820191906000526020600020905b8154815290600101906020018083116127ec57829003601f168201915b50505050508152505081525050815260200160118201805461282a9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546128569061338c565b80156128a35780601f10612878576101008083540402835291602001916128a3565b820191906000526020600020905b81548152906001019060200180831161288657829003601f168201915b505050505081526020016012820180546128bc9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546128e89061338c565b80156129355780601f1061290a57610100808354040283529160200191612935565b820191906000526020600020905b81548152906001019060200180831161291857829003601f168201915b5050505050815260200160138201805461294e9061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461297a9061338c565b80156129c75780601f1061299c576101008083540402835291602001916129c7565b820191906000526020600020905b8154815290600101906020018083116129aa57829003601f168201915b505050918352505060148201546020820152601582015460409091019060ff1660028111156129f8576129f8612f03565b6002811115612a0957612a09612f03565b8152505090508060400151600003612a575760405162461bcd60e51b81526020600482015260116024820152701310c8191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606401611a9a565b60a0810151516001600160a01b03163314612ab45760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c792062656e65666963696172792063616e20616363657074204c4300006044820152606401611a9a565b4281606001516040015111612afc5760405162461bcd60e51b815260206004820152600e60248201526d1310c81a185cc8195e1c1a5c995960921b6044820152606401611a9a565b506001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b604080516101c0810190915260008082526020820190815260200160008152602001612b6b6040805160608101909152600080825260208201908152602001600081525090565b8152602001612b96604051806040016040528060006001600160a01b03168152602001606081525090565b8152602001612bc1604051806040016040528060006001600160a01b03168152602001606081525090565b8152604080516060808201835281526000602082810182905292820152910190815260200160008152602001612bf5612c2e565b81526020016060815260200160608152602001606081526020016000815260200160006002811115612c2957612c29612f03565b905290565b6040805160608101909152806000815260200160008152602001612c29604051806040016040528060608152602001606081525090565b80356001600160a01b0381168114612c7c57600080fd5b919050565b600060208284031215612c9357600080fd5b612c9c82612c65565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612cdc57612cdc612ca3565b60405290565b600082601f830112612cf357600080fd5b813567ffffffffffffffff80821115612d0e57612d0e612ca3565b604051601f8301601f19908116603f01168101908282118183101715612d3657612d36612ca3565b81604052838152866020858801011115612d4f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060408284031215612d8157600080fd5b612d89612cb9565b9050612d9482612c65565b8152602082013567ffffffffffffffff811115612db057600080fd5b612dbc84828501612ce2565b60208301525092915050565b600060408284031215612dda57600080fd5b612de2612cb9565b9050813567ffffffffffffffff80821115612dfc57600080fd5b612e0885838601612ce2565b83526020840135915080821115612e1e57600080fd5b50612dbc84828501612ce2565b60008060008060008060c08789031215612e4457600080fd5b86359550602087013567ffffffffffffffff80821115612e6357600080fd5b612e6f8a838b01612ce2565b96506040890135915080821115612e8557600080fd5b612e918a838b01612d6f565b9550606089013594506080890135915080821115612eae57600080fd5b612eba8a838b01612dc8565b935060a0890135915080821115612ed057600080fd5b50612edd89828a01612ce2565b9150509295509295509295565b600060208284031215612efc57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60028110611c2157611c21612f03565b612f3281612f19565b9052565b80518252602081015160058110612f4f57612f4f612f03565b6020830152604090810151910152565b6000815180845260005b81811015612f8557602081850181015186830182015201612f69565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b0381511682526000602082015160406020850152612fcc6040850182612f5f565b949350505050565b6000815160608452612fe96060850182612f5f565b6020848101516001600160a01b03169086015260409384015193909401929092525090919050565b60068110612f3257612f32612f03565b60038110611c2157611c21612f03565b6000815161303e81613021565b8352602082015161304e81612f19565b8060208501525060408201516060604085015280516040606086015261307760a0860182612f5f565b905060208201519150605f198582030160808601526130968183612f5f565b95945050505050565b612f3281613021565b8e81526130b8602082018f612f29565b8c60408201526130cb606082018d612f36565b61020060c082015260006130e361020083018d612fa5565b82810360e08401526130f5818d612fa5565b905082810361010084015261310a818c612fd4565b905061311a61012084018b613011565b82810361014084015261312d818a613031565b90508281036101608401526131428189612f5f565b90508281036101808401526131578188612f5f565b90508281036101a084015261316c8187612f5f565b915050836101c08301526131846101e083018461309f565b9f9e505050505050505050505050505050565b6020815281516020820152600060208301516131b66040840182612f29565b506040830151606083015260608301516131d36080840182612f36565b5060808301516102008060e08501526131f0610220850183612fa5565b915060a0850151601f196101008187860301818801526132108584612fa5565b945060c0880151925061012082888703018189015261322f8685612fd4565b955060e08901519350610140613247818a0186613011565b828a0151945061016092508389880301838a01526132658786613031565b9650818a0151945061018091508389880301828a01526132858786612f5f565b9650808a01519450506101a08389880301818a01526132a48786612f5f565b9650828a0151945083898803016101c08a01526132c18786612f5f565b918a01516101e08a015289015190955092506132e29150508286018261309f565b5090949350505050565b80604081018310156132fd57600080fd5b92915050565b80608081018310156132fd57600080fd5b60008060008061024080868803121561332c57600080fd5b61333687876132ec565b94506133458760408801613303565b93506133548760c088016132ec565b925086818701111561336557600080fd5b50929591945092610100019150565b60008060008061022080868803121561332c57600080fd5b600181811c908216806133a057607f821691505b6020821081036133c057634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561341057600081815260208120601f850160051c810160208610156133ed5750805b601f850160051c820191505b8181101561340c578281556001016133f9565b5050505b505050565b815167ffffffffffffffff81111561342f5761342f612ca3565b6134438161343d845461338c565b846133c6565b602080601f83116001811461347857600084156134605750858301515b600019600386901b1c1916600185901b17855561340c565b600085815260208120601f198616915b828110156134a757888601518255948401946001909101908401613488565b50858210156134c55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000600182016134f557634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561350e57600080fd5b81518015158114612c9c57600080fdfe546f6b656e697a6564205553442077696c6c206265207472616e73666572726564206469676974616c6c7920746f207468697320636f6e74726163742061646472657373206f6e2074686520457468657265756d20626c6f636b636861696e2ea2646970667358221220232c72c6b05a7dd8a4d43f229f6208fc40809d33ae6c992b77ba99063a257e8064736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80635773cdfb116100715780635773cdfb1461016d5780635ab91137146101845780637aa711f8146101a4578063a21ac172146101b7578063c542c93b146101e3578063cd1aa73e146101f657600080fd5b806305e514e2146100ae5780631e5f8b72146100e657806328cf5cba146100fb5780633e413bee1461012d5780634db7944814610140575b600080fd5b6100d16100bc366004612c81565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100f96100f4366004612e2b565b610209565b005b610115610109366004612eea565b6001600160a01b031690565b6040516001600160a01b0390911681526020016100dd565b600354610115906001600160a01b031681565b61015361014e366004612c81565b610667565b6040516100dd9e9d9c9b9a999897969594939291906130a8565b61017660025481565b6040519081526020016100dd565b610197610192366004612c81565b610c83565b6040516100dd9190613197565b6100f96101b2366004613314565b611366565b6100d16101c5366004612c81565b6001600160a01b031660009081526001602052604090205460ff1690565b6100d16101f1366004613374565b611be9565b6100f9610204366004612c81565b612335565b610211612b24565b600181526000602080830182905260025460408085019190915260608085018051429052805184018590525182018b9052815180830183523381528084018b9052608080870191909152825180840184528a516001600160a01b0390811682528b8601518287015260a080890192909252845191820185526003828501818152621554d160ea1b8486015283525416818601528084018a905260c0870152600560e08701526101008601805186905280518501959095528251808401845288518152888501518186015294518301949094526101208501869052815180830183526013815272141c9bdbd9881bd98814d95855d85e509a5b1b606a1b8185015261014086015281519384019091528083529061351f90830139610160820152621baf8061018082015260026101a0820152336000908152602081815260409091208251815590820151600180830180548594939260ff1990911690838181111561037d5761037d612f03565b0217905550604082015160028201556060820151805160038301908155602082015160048085018054909160ff199091169060019084908111156103c3576103c3612f03565b021790555060409190910151600290910155608082015180516006830180546001600160a01b0319166001600160a01b03909216919091178155602082015160078401906104119082613415565b50505060a082015180516008830180546001600160a01b0319166001600160a01b03909216919091178155602082015160098401906104509082613415565b50505060c08201518051600a830190819061046b9082613415565b506020820151600182810180546001600160a01b0319166001600160a01b039093169290921790915560409092015160029091015560e0830151600d830180549192909160ff1916908360058111156104c6576104c6612f03565b02179055506101008201518051600e83018054909190829060ff191660018360028111156104f6576104f6612f03565b021790555060208201518154829061ff00191661010083600181111561051e5761051e612f03565b0217905550604082015180516001830190819061053b9082613415565b50602082015160018201906105509082613415565b5050505061012083015160118301915061056a9082613415565b5061014082015160128201906105809082613415565b5061016082015160138201906105969082613415565b5061018082015160148201556101a082015160158201805460ff191660018360028111156105c6576105c6612f03565b02179055505060028054915060006105dd836134d5565b90915550506003546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d91906134fc565b5050505050505050565b600060208181529181526040908190208054600182015460028301548451606081019095526003840180548652600480860154949760ff94851697939695939492939085019216908111156106be576106be612f03565b60048111156106cf576106cf612f03565b815260029190910154602091820152604080518082019091526006840180546001600160a01b0316825260078501805494959492939192918401916107139061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461073f9061338c565b801561078c5780601f106107615761010080835404028352916020019161078c565b820191906000526020600020905b81548152906001019060200180831161076f57829003601f168201915b505050919092525050604080518082019091526008840180546001600160a01b0316825260098501805494959492935090916020840191906107cd9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546107f99061338c565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b5050505050815250509080600a0160405180606001604052908160008201805461086f9061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461089b9061338c565b80156108e85780601f106108bd576101008083540402835291602001916108e8565b820191906000526020600020905b8154815290600101906020018083116108cb57829003601f168201915b505050918352505060018201546001600160a01b03166020820152600291820154604091820152600d840154815160608101909252600e85018054949560ff9283169590949192849291169081111561094357610943612f03565b600281111561095457610954612f03565b81528154602090910190610100900460ff16600181111561097757610977612f03565b600181111561098857610988612f03565b8152602001600182016040518060400160405290816000820180546109ac9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546109d89061338c565b8015610a255780601f106109fa57610100808354040283529160200191610a25565b820191906000526020600020905b815481529060010190602001808311610a0857829003601f168201915b50505050508152602001600182018054610a3e9061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6a9061338c565b8015610ab75780601f10610a8c57610100808354040283529160200191610ab7565b820191906000526020600020905b815481529060010190602001808311610a9a57829003601f168201915b5050505050815250508152505090806011018054610ad49061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b009061338c565b8015610b4d5780601f10610b2257610100808354040283529160200191610b4d565b820191906000526020600020905b815481529060010190602001808311610b3057829003601f168201915b505050505090806012018054610b629061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8e9061338c565b8015610bdb5780601f10610bb057610100808354040283529160200191610bdb565b820191906000526020600020905b815481529060010190602001808311610bbe57829003601f168201915b505050505090806013018054610bf09061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1c9061338c565b8015610c695780601f10610c3e57610100808354040283529160200191610c69565b820191906000526020600020905b815481529060010190602001808311610c4c57829003601f168201915b50505050601483015460159093015491929160ff1690508e565b610c8b612b24565b6001600160a01b0382166000908152602081815260409182902082516101c0810190935280548352600180820154919284019160ff1690811115610cd157610cd1612f03565b6001811115610ce257610ce2612f03565b81526020016002820154815260200160038201604051806060016040529081600082015481526020016001820160009054906101000a900460ff166004811115610d2e57610d2e612f03565b6004811115610d3f57610d3f612f03565b815260029190910154602091820152908252604080518082019091526006840180546001600160a01b03168252600785018054948401949293919291840191610d879061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610db39061338c565b8015610e005780601f10610dd557610100808354040283529160200191610e00565b820191906000526020600020905b815481529060010190602001808311610de357829003601f168201915b505050919092525050508152604080518082019091526008830180546001600160a01b0316825260098401805460209485019484019190610e409061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6c9061338c565b8015610eb95780601f10610e8e57610100808354040283529160200191610eb9565b820191906000526020600020905b815481529060010190602001808311610e9c57829003601f168201915b5050505050815250508152602001600a8201604051806060016040529081600082018054610ee69061338c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f129061338c565b8015610f5f5780601f10610f3457610100808354040283529160200191610f5f565b820191906000526020600020905b815481529060010190602001808311610f4257829003601f168201915b505050918352505060018201546001600160a01b0316602080830191909152600290920154604090910152908252600d83015491019060ff166005811115610fa957610fa9612f03565b6005811115610fba57610fba612f03565b81526040805160608101909152600e83018054602090930192829060ff166002811115610fe957610fe9612f03565b6002811115610ffa57610ffa612f03565b81528154602090910190610100900460ff16600181111561101d5761101d612f03565b600181111561102e5761102e612f03565b8152602001600182016040518060400160405290816000820180546110529061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461107e9061338c565b80156110cb5780601f106110a0576101008083540402835291602001916110cb565b820191906000526020600020905b8154815290600101906020018083116110ae57829003601f168201915b505050505081526020016001820180546110e49061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546111109061338c565b801561115d5780601f106111325761010080835404028352916020019161115d565b820191906000526020600020905b81548152906001019060200180831161114057829003601f168201915b50505050508152505081525050815260200160118201805461117e9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546111aa9061338c565b80156111f75780601f106111cc576101008083540402835291602001916111f7565b820191906000526020600020905b8154815290600101906020018083116111da57829003601f168201915b505050505081526020016012820180546112109061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461123c9061338c565b80156112895780601f1061125e57610100808354040283529160200191611289565b820191906000526020600020905b81548152906001019060200180831161126c57829003601f168201915b505050505081526020016013820180546112a29061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546112ce9061338c565b801561131b5780601f106112f05761010080835404028352916020019161131b565b820191906000526020600020905b8154815290600101906020018083116112fe57829003601f168201915b505050918352505060148201546020820152601582015460409091019060ff16600281111561134c5761134c612f03565b600281111561135d5761135d612f03565b90525092915050565b80356001600160a01b031660008181526020818152604080832081516101c0810190925280548252600180820154929391929184019160ff16908111156113af576113af612f03565b60018111156113c0576113c0612f03565b81526020016002820154815260200160038201604051806060016040529081600082015481526020016001820160009054906101000a900460ff16600481111561140c5761140c612f03565b600481111561141d5761141d612f03565b815260029190910154602091820152908252604080518082019091526006840180546001600160a01b031682526007850180549484019492939192918401916114659061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546114919061338c565b80156114de5780601f106114b3576101008083540402835291602001916114de565b820191906000526020600020905b8154815290600101906020018083116114c157829003601f168201915b505050919092525050508152604080518082019091526008830180546001600160a01b031682526009840180546020948501948401919061151e9061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461154a9061338c565b80156115975780601f1061156c57610100808354040283529160200191611597565b820191906000526020600020905b81548152906001019060200180831161157a57829003601f168201915b5050505050815250508152602001600a82016040518060600160405290816000820180546115c49061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546115f09061338c565b801561163d5780601f106116125761010080835404028352916020019161163d565b820191906000526020600020905b81548152906001019060200180831161162057829003601f168201915b505050918352505060018201546001600160a01b0316602080830191909152600290920154604090910152908252600d83015491019060ff16600581111561168757611687612f03565b600581111561169857611698612f03565b81526040805160608101909152600e83018054602090930192829060ff1660028111156116c7576116c7612f03565b60028111156116d8576116d8612f03565b81528154602090910190610100900460ff1660018111156116fb576116fb612f03565b600181111561170c5761170c612f03565b8152602001600182016040518060400160405290816000820180546117309061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461175c9061338c565b80156117a95780601f1061177e576101008083540402835291602001916117a9565b820191906000526020600020905b81548152906001019060200180831161178c57829003601f168201915b505050505081526020016001820180546117c29061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546117ee9061338c565b801561183b5780601f106118105761010080835404028352916020019161183b565b820191906000526020600020905b81548152906001019060200180831161181e57829003601f168201915b50505050508152505081525050815260200160118201805461185c9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546118889061338c565b80156118d55780601f106118aa576101008083540402835291602001916118d5565b820191906000526020600020905b8154815290600101906020018083116118b857829003601f168201915b505050505081526020016012820180546118ee9061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461191a9061338c565b80156119675780601f1061193c57610100808354040283529160200191611967565b820191906000526020600020905b81548152906001019060200180831161194a57829003601f168201915b505050505081526020016013820180546119809061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546119ac9061338c565b80156119f95780601f106119ce576101008083540402835291602001916119f9565b820191906000526020600020905b8154815290600101906020018083116119dc57829003601f168201915b505050918352505060148201546020820152601582015460409091019060ff166002811115611a2a57611a2a612f03565b6002811115611a3b57611a3b612f03565b90525060a0810151519091506001600160a01b03163314611aa35760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792062656e65666963696172792063616e20636f6d706c657465204c4360448201526064015b60405180910390fd5b4281606001516040015111611aeb5760405162461bcd60e51b815260206004820152600e60248201526d1310c81a185cc8195e1c1a5c995960921b6044820152606401611a9a565b6001600160a01b03821660009081526001602081905260409091205460ff16151514611b595760405162461bcd60e51b815260206004820152601860248201527f4c4320686173206e6f74206265656e20616363657074656400000000000000006044820152606401611a9a565b60035460a08201515160c0830151604090810151905163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb906044016020604051808303816000875af1158015611bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be091906134fc565b50505050505050565b600061228d565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110611c21576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa915081611c57576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa91505080611c88576000805260206000f35b5050505050565b7f046b1f6ff37f1c517167dd65f3117b65a3d504301dee0fa7803d954c4afcf75885527f16832aa8567bcea698e1156145cc2162ab777c81c0af4cbcdb79f1a897080757602086015260006080860186611d2c87357f1a4963f8b74ad2b68e4d35c79f61a56f7f5a79a8cc84af1d1807a3e077c6bea67f26c43c169edb64936f35b0d03566a7de5c2f5784124457feb2a1955c95268e2584611c24565b611d7c60208801357f25cb112258fda6375ff57c509e3a48bee3aef73fa7570be21722d1d22e146c027f1617763fb0034c0379397367bea418561184e3dca6bd1f87889929d72832032284611c24565b611dcc60408801357f01f3abad48c437417be02a73d05ba69ffdf74faf1e3e335da858622d19b972c77f16b4a7983e3c561dadc1ed34e34db843237c205242565f0d1c6fd943e00ca04384611c24565b611e1c60608801357f039db774f52b360975aaabcd5946d16e03e2cec58c5a6c5e39a5845c5448b6a67f195cb3729018cb00d3b1c244d39a8c328d1279432970ce02351da7dcff8ec78584611c24565b611e6c60808801357f1d6d20046d8274a8ca0cf6bdd3e2bdac1ba08c53d0a0bd739d2c73648049968f7f0100e3301c7e55011a1d6d8a75a6e876a4360387b1c140289b486617a8d5f06284611c24565b611ebc60a08801357f077190781706b89508d280a15fed9d7b0119c1f86f749830b7b655f033be971a7f11191a2f646ea3aa1979997d85a8c7fb3efd89794aa99ca7202e6ca8f781d18584611c24565b611f0c60c08801357f28d1f6a47bab06cd55a0461d9e7a545a2ebec068187c75571abcaf7adb9254da7f02ee83e0447702d87ebebe409337b7777234076204d445a6da5e4f72cfc092f684611c24565b611f5c60e08801357f3010c3cb3673b001beadca3f88ac8a3ba6e8c525103a43421a6a5223895d939d7f1c9276b622645ca8626de8a34be1e5128a1dd6fb45d2fee53d46b5915ea0c4be84611c24565b611fad6101008801357f1f4c28d50901446a5c84182ed47659f13e10e13561c2ec8d93674f959a53246a7f0b5f4d84cf0b0c3394bc154ad8abf4f967973550929bc62ee8f3aed0280ebb3884611c24565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102c08201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa6102e08201526020816103008360086107d05a03fa9051169695505050505050565b60405161038081016040526122a56000840135611bf0565b6122b26020840135611bf0565b6122bf6040840135611bf0565b6122cc6060840135611bf0565b6122d96080840135611bf0565b6122e660a0840135611bf0565b6122f360c0840135611bf0565b61230060e0840135611bf0565b61230e610100840135611bf0565b61231c610120840135611bf0565b612329818486888a611c8f565b90508060005260206000f35b6001600160a01b03811660009081526020818152604080832081516101c0810190925280548252600180820154929391929184019160ff169081111561237d5761237d612f03565b600181111561238e5761238e612f03565b81526020016002820154815260200160038201604051806060016040529081600082015481526020016001820160009054906101000a900460ff1660048111156123da576123da612f03565b60048111156123eb576123eb612f03565b815260029190910154602091820152908252604080518082019091526006840180546001600160a01b031682526007850180549484019492939192918401916124339061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461245f9061338c565b80156124ac5780601f10612481576101008083540402835291602001916124ac565b820191906000526020600020905b81548152906001019060200180831161248f57829003601f168201915b505050919092525050508152604080518082019091526008830180546001600160a01b03168252600984018054602094850194840191906124ec9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546125189061338c565b80156125655780601f1061253a57610100808354040283529160200191612565565b820191906000526020600020905b81548152906001019060200180831161254857829003601f168201915b5050505050815250508152602001600a82016040518060600160405290816000820180546125929061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546125be9061338c565b801561260b5780601f106125e05761010080835404028352916020019161260b565b820191906000526020600020905b8154815290600101906020018083116125ee57829003601f168201915b505050918352505060018201546001600160a01b0316602080830191909152600290920154604090910152908252600d83015491019060ff16600581111561265557612655612f03565b600581111561266657612666612f03565b81526040805160608101909152600e83018054602090930192829060ff16600281111561269557612695612f03565b60028111156126a6576126a6612f03565b81528154602090910190610100900460ff1660018111156126c9576126c9612f03565b60018111156126da576126da612f03565b8152602001600182016040518060400160405290816000820180546126fe9061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461272a9061338c565b80156127775780601f1061274c57610100808354040283529160200191612777565b820191906000526020600020905b81548152906001019060200180831161275a57829003601f168201915b505050505081526020016001820180546127909061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546127bc9061338c565b80156128095780601f106127de57610100808354040283529160200191612809565b820191906000526020600020905b8154815290600101906020018083116127ec57829003601f168201915b50505050508152505081525050815260200160118201805461282a9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546128569061338c565b80156128a35780601f10612878576101008083540402835291602001916128a3565b820191906000526020600020905b81548152906001019060200180831161288657829003601f168201915b505050505081526020016012820180546128bc9061338c565b80601f01602080910402602001604051908101604052809291908181526020018280546128e89061338c565b80156129355780601f1061290a57610100808354040283529160200191612935565b820191906000526020600020905b81548152906001019060200180831161291857829003601f168201915b5050505050815260200160138201805461294e9061338c565b80601f016020809104026020016040519081016040528092919081815260200182805461297a9061338c565b80156129c75780601f1061299c576101008083540402835291602001916129c7565b820191906000526020600020905b8154815290600101906020018083116129aa57829003601f168201915b505050918352505060148201546020820152601582015460409091019060ff1660028111156129f8576129f8612f03565b6002811115612a0957612a09612f03565b8152505090508060400151600003612a575760405162461bcd60e51b81526020600482015260116024820152701310c8191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606401611a9a565b60a0810151516001600160a01b03163314612ab45760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c792062656e65666963696172792063616e20616363657074204c4300006044820152606401611a9a565b4281606001516040015111612afc5760405162461bcd60e51b815260206004820152600e60248201526d1310c81a185cc8195e1c1a5c995960921b6044820152606401611a9a565b506001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b604080516101c0810190915260008082526020820190815260200160008152602001612b6b6040805160608101909152600080825260208201908152602001600081525090565b8152602001612b96604051806040016040528060006001600160a01b03168152602001606081525090565b8152602001612bc1604051806040016040528060006001600160a01b03168152602001606081525090565b8152604080516060808201835281526000602082810182905292820152910190815260200160008152602001612bf5612c2e565b81526020016060815260200160608152602001606081526020016000815260200160006002811115612c2957612c29612f03565b905290565b6040805160608101909152806000815260200160008152602001612c29604051806040016040528060608152602001606081525090565b80356001600160a01b0381168114612c7c57600080fd5b919050565b600060208284031215612c9357600080fd5b612c9c82612c65565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612cdc57612cdc612ca3565b60405290565b600082601f830112612cf357600080fd5b813567ffffffffffffffff80821115612d0e57612d0e612ca3565b604051601f8301601f19908116603f01168101908282118183101715612d3657612d36612ca3565b81604052838152866020858801011115612d4f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060408284031215612d8157600080fd5b612d89612cb9565b9050612d9482612c65565b8152602082013567ffffffffffffffff811115612db057600080fd5b612dbc84828501612ce2565b60208301525092915050565b600060408284031215612dda57600080fd5b612de2612cb9565b9050813567ffffffffffffffff80821115612dfc57600080fd5b612e0885838601612ce2565b83526020840135915080821115612e1e57600080fd5b50612dbc84828501612ce2565b60008060008060008060c08789031215612e4457600080fd5b86359550602087013567ffffffffffffffff80821115612e6357600080fd5b612e6f8a838b01612ce2565b96506040890135915080821115612e8557600080fd5b612e918a838b01612d6f565b9550606089013594506080890135915080821115612eae57600080fd5b612eba8a838b01612dc8565b935060a0890135915080821115612ed057600080fd5b50612edd89828a01612ce2565b9150509295509295509295565b600060208284031215612efc57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60028110611c2157611c21612f03565b612f3281612f19565b9052565b80518252602081015160058110612f4f57612f4f612f03565b6020830152604090810151910152565b6000815180845260005b81811015612f8557602081850181015186830182015201612f69565b506000602082860101526020601f19601f83011685010191505092915050565b60018060a01b0381511682526000602082015160406020850152612fcc6040850182612f5f565b949350505050565b6000815160608452612fe96060850182612f5f565b6020848101516001600160a01b03169086015260409384015193909401929092525090919050565b60068110612f3257612f32612f03565b60038110611c2157611c21612f03565b6000815161303e81613021565b8352602082015161304e81612f19565b8060208501525060408201516060604085015280516040606086015261307760a0860182612f5f565b905060208201519150605f198582030160808601526130968183612f5f565b95945050505050565b612f3281613021565b8e81526130b8602082018f612f29565b8c60408201526130cb606082018d612f36565b61020060c082015260006130e361020083018d612fa5565b82810360e08401526130f5818d612fa5565b905082810361010084015261310a818c612fd4565b905061311a61012084018b613011565b82810361014084015261312d818a613031565b90508281036101608401526131428189612f5f565b90508281036101808401526131578188612f5f565b90508281036101a084015261316c8187612f5f565b915050836101c08301526131846101e083018461309f565b9f9e505050505050505050505050505050565b6020815281516020820152600060208301516131b66040840182612f29565b506040830151606083015260608301516131d36080840182612f36565b5060808301516102008060e08501526131f0610220850183612fa5565b915060a0850151601f196101008187860301818801526132108584612fa5565b945060c0880151925061012082888703018189015261322f8685612fd4565b955060e08901519350610140613247818a0186613011565b828a0151945061016092508389880301838a01526132658786613031565b9650818a0151945061018091508389880301828a01526132858786612f5f565b9650808a01519450506101a08389880301818a01526132a48786612f5f565b9650828a0151945083898803016101c08a01526132c18786612f5f565b918a01516101e08a015289015190955092506132e29150508286018261309f565b5090949350505050565b80604081018310156132fd57600080fd5b92915050565b80608081018310156132fd57600080fd5b60008060008061024080868803121561332c57600080fd5b61333687876132ec565b94506133458760408801613303565b93506133548760c088016132ec565b925086818701111561336557600080fd5b50929591945092610100019150565b60008060008061022080868803121561332c57600080fd5b600181811c908216806133a057607f821691505b6020821081036133c057634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561341057600081815260208120601f850160051c810160208610156133ed5750805b601f850160051c820191505b8181101561340c578281556001016133f9565b5050505b505050565b815167ffffffffffffffff81111561342f5761342f612ca3565b6134438161343d845461338c565b846133c6565b602080601f83116001811461347857600084156134605750858301515b600019600386901b1c1916600185901b17855561340c565b600085815260208120601f198616915b828110156134a757888601518255948401946001909101908401613488565b50858210156134c55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000600182016134f557634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561350e57600080fd5b81518015158114612c9c57600080fdfe546f6b656e697a6564205553442077696c6c206265207472616e73666572726564206469676974616c6c7920746f207468697320636f6e74726163742061646472657373206f6e2074686520457468657265756d20626c6f636b636861696e2ea2646970667358221220232c72c6b05a7dd8a4d43f229f6208fc40809d33ae6c992b77ba99063a257e8064736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 331,
        "contract": "contracts/LC.sol:LCContract",
        "label": "creatorToLC",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(LC)326_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/LC.sol:LCContract",
        "label": "acceptedLC",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 338,
        "contract": "contracts/LC.sol:LCContract",
        "label": "docCreditNumberCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 341,
        "contract": "contracts/LC.sol:LCContract",
        "label": "usdc",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)190"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)190": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(ApplicableRules)236": {
        "encoding": "inplace",
        "label": "enum LCContract.ApplicableRules",
        "numberOfBytes": "1"
      },
      "t_enum(AvailableWithBy)254": {
        "encoding": "inplace",
        "label": "enum LCContract.AvailableWithBy",
        "numberOfBytes": "1"
      },
      "t_enum(ConfirmationInstructions)247": {
        "encoding": "inplace",
        "label": "enum LCContract.ConfirmationInstructions",
        "numberOfBytes": "1"
      },
      "t_enum(FormOfDocCredit)230": {
        "encoding": "inplace",
        "label": "enum LCContract.FormOfDocCredit",
        "numberOfBytes": "1"
      },
      "t_enum(PartialShipments)240": {
        "encoding": "inplace",
        "label": "enum LCContract.PartialShipments",
        "numberOfBytes": "1"
      },
      "t_enum(Transshipment)243": {
        "encoding": "inplace",
        "label": "enum LCContract.Transshipment",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(LC)326_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LCContract.LC)",
        "numberOfBytes": "32",
        "value": "t_struct(LC)326_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ActorDetails)259_storage": {
        "encoding": "inplace",
        "label": "struct LCContract.ActorDetails",
        "members": [
          {
            "astId": 256,
            "contract": "contracts/LC.sol:LCContract",
            "label": "addressEOA",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 258,
            "contract": "contracts/LC.sol:LCContract",
            "label": "addressIRL",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CurrencyDetails)289_storage": {
        "encoding": "inplace",
        "label": "struct LCContract.CurrencyDetails",
        "members": [
          {
            "astId": 284,
            "contract": "contracts/LC.sol:LCContract",
            "label": "currencyCode",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 286,
            "contract": "contracts/LC.sol:LCContract",
            "label": "currencyAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 288,
            "contract": "contracts/LC.sol:LCContract",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(IssueDetails)267_storage": {
        "encoding": "inplace",
        "label": "struct LCContract.IssueDetails",
        "members": [
          {
            "astId": 261,
            "contract": "contracts/LC.sol:LCContract",
            "label": "dateOfIssue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 264,
            "contract": "contracts/LC.sol:LCContract",
            "label": "applicableRules",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(ApplicableRules)236"
          },
          {
            "astId": 266,
            "contract": "contracts/LC.sol:LCContract",
            "label": "dateAndPlaceOfExpiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LC)326_storage": {
        "encoding": "inplace",
        "label": "struct LCContract.LC",
        "members": [
          {
            "astId": 291,
            "contract": "contracts/LC.sol:LCContract",
            "label": "sequenceOfTotal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 294,
            "contract": "contracts/LC.sol:LCContract",
            "label": "formOfDocCredit",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(FormOfDocCredit)230"
          },
          {
            "astId": 296,
            "contract": "contracts/LC.sol:LCContract",
            "label": "docCreditNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 299,
            "contract": "contracts/LC.sol:LCContract",
            "label": "issueDetails",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(IssueDetails)267_storage"
          },
          {
            "astId": 302,
            "contract": "contracts/LC.sol:LCContract",
            "label": "applicant",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(ActorDetails)259_storage"
          },
          {
            "astId": 305,
            "contract": "contracts/LC.sol:LCContract",
            "label": "beneficiary",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(ActorDetails)259_storage"
          },
          {
            "astId": 308,
            "contract": "contracts/LC.sol:LCContract",
            "label": "currencyDetails",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(CurrencyDetails)289_storage"
          },
          {
            "astId": 311,
            "contract": "contracts/LC.sol:LCContract",
            "label": "availableWithBy",
            "offset": 0,
            "slot": "13",
            "type": "t_enum(AvailableWithBy)254"
          },
          {
            "astId": 314,
            "contract": "contracts/LC.sol:LCContract",
            "label": "shippingDetails",
            "offset": 0,
            "slot": "14",
            "type": "t_struct(ShippingDetails)282_storage"
          },
          {
            "astId": 316,
            "contract": "contracts/LC.sol:LCContract",
            "label": "descriptionOfGoodsAndOrServices",
            "offset": 0,
            "slot": "17",
            "type": "t_string_storage"
          },
          {
            "astId": 318,
            "contract": "contracts/LC.sol:LCContract",
            "label": "documentsRequired",
            "offset": 0,
            "slot": "18",
            "type": "t_string_storage"
          },
          {
            "astId": 320,
            "contract": "contracts/LC.sol:LCContract",
            "label": "additionalConditions",
            "offset": 0,
            "slot": "19",
            "type": "t_string_storage"
          },
          {
            "astId": 322,
            "contract": "contracts/LC.sol:LCContract",
            "label": "periodForPresentation",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256"
          },
          {
            "astId": 325,
            "contract": "contracts/LC.sol:LCContract",
            "label": "confirmationInstructions",
            "offset": 0,
            "slot": "21",
            "type": "t_enum(ConfirmationInstructions)247"
          }
        ],
        "numberOfBytes": "704"
      },
      "t_struct(PortDetails)272_storage": {
        "encoding": "inplace",
        "label": "struct LCContract.PortDetails",
        "members": [
          {
            "astId": 269,
            "contract": "contracts/LC.sol:LCContract",
            "label": "portOfLoading",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 271,
            "contract": "contracts/LC.sol:LCContract",
            "label": "portOfDischarge",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ShippingDetails)282_storage": {
        "encoding": "inplace",
        "label": "struct LCContract.ShippingDetails",
        "members": [
          {
            "astId": 275,
            "contract": "contracts/LC.sol:LCContract",
            "label": "partialShipments",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(PartialShipments)240"
          },
          {
            "astId": 278,
            "contract": "contracts/LC.sol:LCContract",
            "label": "transshipment",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(Transshipment)243"
          },
          {
            "astId": 281,
            "contract": "contracts/LC.sol:LCContract",
            "label": "portDetails",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(PortDetails)272_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}